纸牌程序设计【需求一】 4-1
一、需求概述
1. 主玩法基础逻辑
初始有一张底牌，需要与主牌区的牌匹配消除 

2. 区域分布
3. 消除规则
二、任务实现需求

1. 需求
需求1：手牌区翻牌替换
需求2：桌面牌和手牌区顶部牌匹配
需求3：回退功能
2. 开发环境及要求
开发环境：cocos2dx 3.17
要求：
代码结构请借鉴并尽可能遵循程 三、序设计架构要求；达到代码结构可维护性和可扩展性。
如有程序设计文档交付更好；在文档里能将清楚在你的代码结构下未来怎么新加一个卡牌和一个新类型的回退功能是加分项
代码结构和程序文档的更好的交付决定未来可以承接的需求量
3. 细节说明以及资源文件
设计分辨率：1080*2080；窗口大小 1080*2080
主牌区和卡堆尺寸
主牌区尺寸：1080*1500
堆牌去尺寸: 1080*580
关卡配置文件

图片资源文件
[res.zip]
三、程序设计架构要求
1. 目录结构
configs/ - 静态配置相关类
models/ - 数据模型层，包含游戏的核心数据结构
views/ - 视图层，包含所有的UI展示组件
controllers/ - 控制器层，协调模型和视图
managers/ -管理器层
services/ -服务层
utils/ - 工具类，提供通用功能
2. 组件间通信流程
1. 用户UI交互流程
用户点击UI元素：
用户点击卡片等UI元素时，首先由View层（如CardView）捕获事件
View到Controller的事件传递：
回调函数：Controller在初始化时向View注册回调函数，View触发回调通知Controller
Controller处理业务逻辑：
GameController或CardController接收到事件后，执行相应的业务逻辑
在处理前，Controller可能会更新UndoModel（通过UndoService向UndoModel插入一条回滚记录数据）
处理逻辑结束后，Controller更新Model的状态
Controller更新View：
逻辑处理完成后，Controller调用View对应的动画接口
例如，GameController调用GameView的playMatchAnimation匹配动画
1.1 典型交互案例：点击卡片
2. 游戏初始化加载
四、编码规范
命名规范
类名和文件名：大写字母开头
函数名和变量名：采用驼峰风格（小写字母开头）
类的私有成员和方法：以 _ 下划线开头
常量变量名：以小写字母 k 开头
代码质量要求
每个类必须在声明处添加类的注释，清晰描述类的功能、职责和使用场景
类的成员变量和公共方法必须添加规范的注释，说明其用途、参数和返回值
当函数代码超过50行；请重构。
当类代码超过500行；请重构。
模块职责明确，遵循单一职责原则；要求代码的可维护性和可扩展性
各模块具体规范
models层
数据层，不包含复杂的业务逻辑
支持序列化和反序列化（因为游戏支持存档恢复继续玩）
views层
UI视图层，负责界面展示
可持有const类型的controller指针和const类型的model指针
与其他模块的交互可以通过回调接口来实现
controllers层
主要协调model和view之间的交互
处理用户操作的业务逻辑
managers层
主要作为controller的成员变量
可持有model数据并对model数据进行加工
禁止实现为单例模式
禁止反向依赖controller(维护性差，也不便单元测试)
与其他模块的交互可以通过回调接口来实现
可以提供全局性的服务和功能
services层
处理业务逻辑，不管理数据生命周期
自身禁止持有数据，但可加工数据
可以实现为单例或者提供静态方法
utils层
提供通用独立的辅助功能
不涉及业务逻辑，完全独立